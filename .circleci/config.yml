version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/CAaGusCeKyezrNWgEh6TWn/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi

jobs:
  build-app:
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ .Branch }}
            - gem-cache-v1
      - run:
          name: Bundle install
          command: |
            bundle install --path vendor/bundle
      - save_cache:
          key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

  test-app:
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - restore_cache:
          key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            bundle install --path vendor/bundle
      - run:
          name: Run RSpec tests
          command: |
            bundle exec rspec

  scan-app:
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - restore_cache:
          key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            bundle install --path vendor/bundle
      - run:
          name: Lint with Rubocop
          command: |
            bundle exec rubocop

  upload-docker:
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            DOCKERPATH=duongpham910/rails-capstone-project:${CIRCLE_WORKFLOW_ID:0:7}

            docker build --tag=rails-capstone-project .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker tag rails-capstone-project $DOCKERPATH
            docker push $DOCKERPATH

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip3 install awscli
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.100.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: Create cluster
          command: |
            eksctl create cluster \
              --name eksctl-${CIRCLE_WORKFLOW_ID:0:7} \
              --region=us-west-1 \
              --instance-types=t3.micro

  deploy-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip3 install awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Update kube config
          command: |
            aws eks update-kubeconfig --region us-west-1 --name eksctl-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy rails container to eks cluster
          command: |
            sed -i "s/tag/${CIRCLE_WORKFLOW_ID:0:7}/g" eks-container-deployment.yaml
            kubectl apply -f eks-container-deployment.yaml
            kubectl apply -f eks-loadbalancer-service.yaml
            # See the status
            sleep 5
            kubectl get deploy,rs,svc,pods

workflows:
  default:
    jobs:
      - build-app
      - test-app:
          requires: [build-app]
      - scan-app:
          requires: [build-app]
      - upload-docker:
          requires: [test-app, scan-app]
      - deploy-infrastructure:
          requires: [test-app, scan-app]
      - deploy-cluster:
          requires: [upload-docker, deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend]
      # - cleanup:
      #     requires: [smoke-test]
