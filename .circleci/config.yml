version: 2.1

jobs:
  build-app:
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ .Branch }}
            - gem-cache-v1
      - run:
          name: Bundle install
          command: |
            bundle install --path vendor/bundle
      - save_cache:
          key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

  test-app:
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - restore_cache:
          key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            bundle install --path vendor/bundle
      - run:
          name: Run RSpec tests
          command: |
            bundle exec rspec

  scan-app:
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - restore_cache:
          key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            bundle install --path vendor/bundle
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                sudo chmod +x /bin/hadolint
      - run:
          name: Lint rubocop
          command: |
            bundle exec rubocop

      - run:
          name: Lint docker
          command: |
            hadolint Dockerfile

  upload-docker:
    docker:
      - image: cimg/ruby:2.7.6
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            DOCKERPATH=duongpham910/rails-capstone-project:${CIRCLE_WORKFLOW_ID:0:7}

            docker build --tag=rails-capstone-project .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker tag rails-capstone-project $DOCKERPATH
            docker push $DOCKERPATH

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip3 install awscli
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.100.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: Create cluster
          command: |
            eksctl create cluster \
              --name eksctl-${CIRCLE_WORKFLOW_ID:0:7} \
              --region=us-west-1 \
              --instance-types=t3.micro \
              --tags="version=${CIRCLE_WORKFLOW_ID:0:7}" \
              --nodegroup-name ng-${CIRCLE_WORKFLOW_ID:0:7}

  deploy-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip3 install awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Update kube config
          command: |
            aws eks update-kubeconfig --region us-west-1 --name eksctl-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy rails container to eks cluster
          command: |
            sed -i "s/tag/${CIRCLE_WORKFLOW_ID:0:7}/g" eks-container-deployment.yaml
            kubectl apply -f eks-container-deployment.yaml
            kubectl apply -f eks-loadbalancer-service.yaml
            # See the status
            sleep 5
            kubectl get deploy,rs,svc,pods

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl jq
            pip3 install awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Update kube config
          command: |
            aws eks update-kubeconfig --region us-west-1 --name eksctl-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Backend smoke test.
          command: |
            kubectl get svc kubernetes-rails-load-balancer

            export EXTERNAL_IP=$(kubectl get svc kubernetes-rails-load-balancer -o json | jq -r .status.loadBalancer.ingress[0].hostname)
            export API_URL="http://${EXTERNAL_IP}"
            echo "${API_URL}"
            if curl "${API_URL}" | grep "Hello World"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            pip3 install awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Update kube config
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    describe-stacks --query "Stacks[2].Tags[?Key=='version'].Value" \
                    --region us-west-1 --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"

            aws eks update-kubeconfig --region us-west-1 --name eksctl-${OldWorkflowID}
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    describe-stacks --query "Stacks[2].Tags[?Key=='version'].Value" \
                    --region us-west-1 --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              kubectl delete all --all
              aws cloudformation delete-stack --stack-name "eksctl-eksctl-${OldWorkflowID}-nodegroup-ng-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "eksctl-eksctl-${OldWorkflowID}-cluster"
            else
              echo "Cannot cleanup"
            fi

workflows:
  default:
    jobs:
      - build-app
      - test-app:
          requires: [build-app]
      - scan-app:
          requires: [build-app]
      - upload-docker:
          requires: [test-app, scan-app]
      - deploy-infrastructure:
          requires: [test-app, scan-app]
      - deploy-cluster:
          requires: [upload-docker, deploy-infrastructure]
      - smoke-test:
          requires: [deploy-cluster]
      - cleanup:
          requires: [deploy-cluster]
